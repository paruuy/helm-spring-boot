---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.application.name }}-deployment"
  labels:
    application: "{{ .Values.application.name }}" 
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      application: "{{ .Values.application.name }}" 
  template:
    metadata:
      annotations:
        {{- if .Values.springPropConfig.enable }}
        checksum/config: {{ include (print $.Template.BasePath "/cm-app-properties.yaml") . | sha256sum }}
        {{- end }}
        application: "{{ .Values.application.name }}" 
      labels:
        application: "{{ .Values.application.name }}" 
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      volumes:
        - name: properties
          {{- if .Values.springPropConfig.enable }}
          configMap:
            name: "cm-{{ .Values.application.name }}"
          {{- else -}}
          emptyDir: {}
          {{- end }}
      containers:
        - name: "{{ .Values.application.name }}" 
        {{- if not .Values.image.registry }}
          {{- fail "The 'image.registry' field is not defined. Define the 'registry' field in the values.yaml file." }}
        {{- else if not (regexMatch "^.*\\/$" .Values.image.registry) }}
          {{- fail "The 'image.registry' value must end with a forward slash (/)." }}
        {{- end }}
        {{- if not .Values.image.repositoryPath }}
          {{- fail "The 'image.repositoryPath' field is not defined. Define the 'repositoryPath' field in the values.yaml file. For example, if your fully registry URL is 'dsocc-docker.devops.tech.ec.europa.eu/caas-demo/digital-streams/notifications', the repositoryPath should be 'caas-demo/digital-streams/notifications'" }}
        {{- end }}
          image: "{{ .Values.image.registry }}{{ .Values.image.repositoryPath }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: >-
                -agentlib:jdwp=transport=dt_socket{{- if .Values.debug.enabled  | default false }},gaddress={{ .Values.debug.port }}{{- end }},server=y,suspend=n,
                -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts,
                -Dcom.sun.jndi.ldap.object.trustURLCodebase=false,
                -Dlog4j2.formatMsgNoLookups=true,
          {{- if .Values.springPropConfig.enable }}
            - name: SPRING_CONFIG_LOCATION
              value: "file:///tmp/config/application.properties"
          {{- end }}
          {{- if .Values.externalSecrets.enabled }}
            {{- range .Values.externalSecrets.secretData }}
            - name: {{ .envVarName }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
          volumeMounts:
            - name: properties
              mountPath: "/tmp/config"
          {{- if .Values.probes.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readinessProbe.httpGet.path }}
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.livenessProbe.httpGet.path }}
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startupProbe.httpGet.path }}
              port: {{ .Values.service.targetPort }}
            failureThreshold: {{ .Values.probes.startupProbe.failureTreshold }}
            periodSeconds: {{ .Values.probes.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startupProbe.timeoutSeconds }}
          {{- end }}
          